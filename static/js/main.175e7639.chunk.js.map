{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/actions.jsx","redux/contacts/operations.jsx","redux/contacts/selectors.jsx","components/Form/Form.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","redux/contacts/reduser.jsx","redux/store.jsx","index.js","components/Form/Form.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","getFilter","state","contacts","filter","getAllContacts","items","getVisibleContacts","createSelector","console","log","normalizedFilter","toLowerCase","contact","name","includes","Form","number","nameInputId","uuidv4","numberInputId","handleChange","e","currentTarget","value","setState","createContact","props","onSubmit","sameName","find","el","sameNumber","alert","handleSubmit","preventDefault","reset","className","style","form","this","htmlFor","label","type","id","input","onChange","placeholder","pattern","title","required","button","Component","connect","dispatch","post","then","data","catch","error","addContact","Filter","defaultProps","target","ContactList","fetchContacts","onDeleteContact","length","contact__container","map","contact_list","onClick","delete","deleteContact","a","get","App","createReducer","_","payload","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.175e7639.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__3ih7w\",\"contact__container\":\"ContactList_contact__container__1tD2j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__-fqMC\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import { v4 as uuidv4 } from \"uuid\";\r\n\r\n\r\nexport const addContact = createAction(\"contacts/add\", (name, number) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nexport const deleteContact = createAction(\"contacts/delete\");\r\n\r\nexport const changeFilter = createAction(\"contacts/filter\");*/\r\n\r\n/*export const addContact = (name, number) => ({\r\n  type: \"phoneBook/addContact\",\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n});\r\n\r\nexport const deleteContact = (contactId) => ({\r\n  type: \"phoneBook/deleteContact\",\r\n  payload: contactId,\r\n});\r\n\r\nexport const changeFilter = (value) => ({\r\n  type: \"phoneBook/changeFilter\",\r\n  payload: value,\r\n});*/\r\n","import axios from 'axios';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { \r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    } from \"./actions\";\r\n\r\n  axios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\nexport const addContact = (name, number) => dispatch => {\r\n    const contact = {\r\n      id: uuidv4(),\r\n      name,\r\n      number,\r\n    };\r\n  \r\n    dispatch(addContactRequest());\r\n  \r\n    axios\r\n      .post('/contacts', contact)\r\n      .then(({ data }) => dispatch(addContactSuccess(data)))\r\n      .catch(error => dispatch(addContactError(error)));\r\n  };\r\nexport const deleteContact = id => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n  \r\n    axios\r\n      .delete(`/contacts/${id}`)\r\n      .then(() => dispatch(deleteContactSuccess(id)))\r\n      .catch(error => dispatch(deleteContactError(error)));\r\n  };\r\n  \r\n\r\n  ","import { createSelector } from '@reduxjs/toolkit';\r\n\r\n// export const getLoading = state => state.contacts.loading;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getAllContacts = state => state.contacts.items;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n      console.log('Составляю новый массив видимых туду');\r\n      const normalizedFilter = filter.toLowerCase();\r\n  \r\n      return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n      );\r\n    },\r\n  );\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addContact } from \"../../redux/contacts/operations\";\r\nimport { getAllContacts } from '../../redux/contacts/selectors'\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport style from \"./Form.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  nameInputId = uuidv4();\r\n  numberInputId = uuidv4();\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n  createContact = () => {\r\n    const { name, number } = this.state;\r\n    const { onSubmit, items } = this.props;\r\n\r\n    const sameName = items.find(\r\n      (el) => el.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n    const sameNumber = items.find((el) => el.number === number);\r\n    if (sameName || sameNumber) {\r\n      alert(`${name} or ${number} is already in contacts`);\r\n    \r\n    return;\r\n  }\r\n    else {onSubmit(name, number);}\r\n  };\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.createContact();\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={style.form} onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.nameInputId} className={style.label}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            id={this.nameInputId}\r\n            className={style.input}\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            placeholder=\"enter contact name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor={this.numberInputId} className={style.label}>\r\n          Number\r\n          <input\r\n            type=\"text\"\r\n            id={this.numberInputId}\r\n            className={style.input}\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n            placeholder=\"enter contact number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12  цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" className={style.button}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  items: getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\nForm.propTypes = { onSubmit: PropTypes.func.isRequired };\r\n","import { connect } from \"react-redux\";\r\nimport { changeFilter } from \"../../redux/contacts/actions\";\r\nimport { getFilter } from '../../redux/contacts/selectors'\r\nimport PropTypes from \"prop-types\";\r\nimport style from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <>\r\n    <h3>Find Contacts By Name</h3>\r\n    <label className={style.label}>\r\n      <input\r\n        className={style.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  </>\r\n);\r\n\r\nFilter.defaultProps = {\r\n  value: \"\",\r\n};\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) => dispatch(changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { deleteContact, fetchContacts } from \"../../redux/contacts/operations\";\r\nimport { getVisibleContacts } from '../../redux/contacts/selectors'\r\nimport PropTypes from \"prop-types\";\r\nimport style from \"./ContactList.module.css\";\r\n\r\nclass ContactList extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n  render() {\r\n    const { items, onDeleteContact } = this.props;\r\n    return (\r\n      items.length > 0 && (\r\n        <ul className={style.contact__container}>\r\n          {items.map(({ id, name, number }) => {\r\n            return (\r\n              <li className={style.contact_list} key={id}>\r\n                {name}: {number}\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => onDeleteContact(id)}\r\n                  className={style.button}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      )\r\n    );}\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n   items: getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(deleteContact(id)),\r\n  fetchContacts: () => dispatch(fetchContacts()),\r\n});\r\n\r\nContactList.propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import ContactForm from \"./components/Form/Form\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport ContactList from \"./components/ContactList/ContactList\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n\r\n/*class App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: \"\",\r\n  };\r\n  componentDidMount() {\r\n    const contacts = localStorage.getItem(\"contacts\");\r\n    const parsedContacts = JSON.parse(contacts);\r\n    if (parsedContacts) {\r\n      this.setState({ contacts: parsedContacts });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const nextContacts = this.state.contacts;\r\n    const prevContacts = prevState.contacts;\r\n\r\n    if (nextContacts !== prevContacts) {\r\n      localStorage.setItem(\"contacts\", JSON.stringify(nextContacts));\r\n    }\r\n  }\r\n\r\n  addContact = ({ name, number }) => {\r\n    const sameName = this.state.contacts.find((el) =>\r\n      el.name.toLowerCase().includes(name.toLowerCase())\r\n    );\r\n    const sameNumber = this.state.contacts.find((el) =>\r\n      el.number.includes(number)\r\n    );\r\n\r\n    if (sameName || sameNumber) {\r\n      alert(`${name} or ${number} is already in contacts`);\r\n    } else {\r\n      const newContact = {\r\n        id: uuidv4(),\r\n        name,\r\n        number,\r\n      };\r\n      this.setState(({ contacts }) => ({\r\n        contacts: [newContact, ...contacts],\r\n      }));\r\n    }\r\n  };\r\n\r\n  /* deleteContact = (contactId) => {\r\n    this.setState((prevState) => ({\r\n      contacts: prevState.contacts.filter(\r\n        (contact) => contact.id !== contactId\r\n      ),\r\n    }));\r\n  };\r\n\r\n  changeFilter = (e) => {\r\n    this.setState({ filter: e.currentTarget.value });\r\n  };*/\r\n\r\n/*getVisibleContacts = () => {\r\n    const { filter, contacts } = this.state;\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { contacts, filter } = this.state;\r\n    const visibleContacts = this.getVisibleContacts();\r\n    return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm onSubmit={this.addContact} contacts={contacts} />\r\n        <h2>Contacts</h2>\r\n        <Filter value={filter} onChange={this.changeFilter} />\r\n        <ContactList\r\n          contacts={visibleContacts}\r\n          onDeleteContact={this.deleteContact}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}*/\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { \r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter, \r\n} from \"./actions\";\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n  });\r\n\r\n  const loading = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n    });\r\n    \r\n    const filter = createReducer('', {\r\n      [changeFilter]: (_, { payload }) => payload,\r\n    });\r\n    \r\n    const error = createReducer(null, {});\r\n    \r\n    export default combineReducers({\r\n      items,\r\n      filter,\r\n      loading,\r\n      error,\r\n    });\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n// import storage from \"redux-persist/lib/storage\";\r\nimport contactReducer from \"./contacts/reduser\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n  middleware,\r\n  // devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n//const persistor = persistStore(store);\r\nexport default store;\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\n// import { PersistGate } from \"redux-persist/integration/react\";\r\nimport App from \"./App\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n          <App />\r\n        {/* </PersistGate> */}\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n  );","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__3RqOJ\",\"label\":\"Form_label__UkU2u\",\"input\":\"Form_input__2CzUS\"};"],"sourceRoot":""}